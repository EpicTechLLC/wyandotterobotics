name: Build and Deploy Wyandotte Robotics Site

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      # Step 1: Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Restore Astro Build Cache
      - name: Restore Astro Build Cache
        uses: actions/cache@v3
        with:
          path: .astro-cache
          key: astro-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
              astro-cache-${{ hashFiles('**/package-lock.json') }}

      - name: Debug Build Context
        run: |
          echo "Checking files in build context..."
          ls -la .astro-cache/cache || echo ".astro-cache not found"

      # Step 4: Build the Docker Image
      - name: Build Docker Image with Cache Volume
        run: |
          echo "Building Docker image with mounted cache..."
          docker build --build-arg CACHE_DIR=/app/.astro/cache -t wyandotte-robotics .

      # Step 5: Verify Cache in Docker Container
      - name: Verify Cache in Docker Container
        run: |
          docker create --name wyandotte-build wyandotte-robotics
          docker start wyandotte-build
          docker exec wyandotte-build ls -la /app/.astro/cache || echo "Cache not found in container!"
          docker stop wyandotte-build
          docker rm wyandotte-build

      # Step 6: Extract Astro Cache
      - name: Extract Astro Cache
        run: |
          docker create --name wyandotte-build wyandotte-robotics
          docker cp wyandotte-build:/app/.astro/cache .astro-cache
          docker rm wyandotte-build

      # Step 6: Cache the Astro Build Cache
      - name: Cache Astro Build Cache
        uses: actions/cache@v3
        with:
          path: .astro-cache
          key: astro-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
              astro-cache-${{ hashFiles('**/package-lock.json') }}

      # Step 7: Stop and Remove Existing Container
      - name: Stop and Remove Existing Container
        run: |
          echo "Stopping and removing existing container..."
          if [ "$(docker ps -q -f name=wyandotte-robotics)" ]; then
            echo "Stopping container..."
            docker stop wyandotte-robotics
          fi
          if [ "$(docker ps -aq -f name=wyandotte-robotics)" ]; then
            echo "Removing container..."
            docker rm wyandotte-robotics
          fi
          echo "Existing container stopped and removed!"

      # Step 8: Run New Container with Health Check
      - name: Run New Container with Health Check
        run: |
          echo "Running new container..."
          docker run -d \
            -p 4321:4321 \
            --name wyandotte-robotics \
            --restart unless-stopped \
            --health-cmd="curl -f http://localhost:4321/ || exit 1" \
            --health-interval=30s \
            --health-timeout=10s \
            --health-retries=3 \
            wyandotte-robotics
          echo "New container started successfully!"

      # Step 9: Clean Up Old Docker Images
      - name: Remove Unused Docker Images
        run: |
          echo "Cleaning up unused Docker images..."
          docker image prune -f
          echo "Unused Docker images removed!"
